"use strict";

/*
 * # 异步
 *
 * ## 进程和线程
 *
 * - 进程（厂房）：程序的运行环境
 * - 线程（工人）：实际进行运算的最小单位
 *
 * ## 同步和异步
 *
 * - 同步
 *   - 通常情况代码都是自上而下一行一行执行的
 *   - 如果前边的代码不执行，后边的代码也不会执行
 *   - 同步代码执行会出现阻塞的情况
 *   - 一行代码执行慢会影响到整个程序的执行
 *   - 解决同步问题
 *     - Java、Python：通过多线程来解决
 *     - Node.js：通过异步来解决
 * - 异步
 *   - 一段代码的执行不会影响到其它程序的执行
 *   - 特点
 *     - 不会阻塞其它代码的执行
 *     - 需要通过回调函数来获取异步代码的执行结果
 *   - 异步的问题
 *     - 异步的代码无法通过 `return` 来返回值
 *   - 基于回调函数的异步带来的问题
 *     - 代码的可读性差
 *     - 代码的可维护性差
 *     - 回调地狱
 *   - 解决回调地狱的问题
 *     - 需要一个东西，可以代替回调函数来返回异步代码的执行结果
 *     - Promise
 *       - 可以用来存储数据的对象
 *       - 存储数据的方式比较特殊
 *         - 这种特殊方式使得 Promise 可以存储异步调用的数据
 */
function sum(a, b, callback) {
    setTimeout(() => {
        let now = Date.now();
        while (Date.now() - now < 3000) {
            // do nothing
        }

        callback(a + b);
    }, 0);
}

console.log("1");
sum(1, 2, r => {
    console.log(r);
});
sum(1, 2, r1 => {
    sum(r1, 3, r2 => {
        console.log(r2);
    });
});
console.log("2");
